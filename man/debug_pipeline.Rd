% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/debug_pipeline.R
\name{debug_pipeline}
\alias{debug_pipeline}
\title{Run a pipeline step-by-step in the debugging browser}
\usage{
debug_pipeline(pipeline, data = c("pipe", "insert"))
}
\arguments{
\item{pipeline}{A pipeline to debug step-by-step Can be an unquoted
expression or a character vector of code. If missing, uses the text
highlighted in RStudio's source editor.}

\item{data}{Determines whether data is piped in (\code{data \%>\% function(parameter)}) or inserted as the first parameter of each call
(\code{function(data, parameter)}). Piping is necessary to make dot notation
work; inserting makes stepping into calls easier.}
}
\description{
\code{debug_pipeline} creates a function out of the input pipeline with each line
running an additional step from the pipeline and calls the debugging browser
on the function. Each line run prints to the console plus stores the result
to a variable of the form \code{dot[N]}, where \code{[N]} is the index of the element
in the pipeline, so results can easily be replicated or adjusted in the
debugging console.
}
\details{
\code{debug_pipeline} can also be called interactively in RStudio via the "Debug
pipeline in browser" add-in after highlighting the pipeline to debug in the
source editor.

For a full explanation of the special commands available in the debugging
browser, see \code{\link{browser}}.
}
\examples{
\dontrun{
library(magrittr)

debug_pipeline(
    x <- 1:5 \%>\% rev \%>\% {. * 2} \%>\% sample(replace = TRUE)
)

debug_pipeline(
    x <- 1:5 \%>\% rev() \%>\% sample(replace = TRUE),
    data = "insert"
)
}

}
\seealso{
\code{\link{browser}}, \code{\link[magrittr:debug_pipe]{magrittr::debug_pipe}}
}
